{"version":3,"sources":["logo.svg","App.js","components/Square/index.jsx","components/Board/index.jsx","components/Game/index.jsx","index.js"],"names":["App","Square","className","onClick","value","Board","size","squares","highlightItems","renderSquare","i","isHighlight","boardItems","renderRow","rowI","rowItems","colI","index","includes","push","Game","useState","Array","Math","pow","fill","location","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","reverseMoveList","setReverseMoveList","setHighlightItems","calculateWinner","winCase","currentSquare","row","col","copy","board","length","splice","rowSquares","colSquares","diagSquares","antiSquares","locationToIndex","winSquare","winSquares","newHistory","current","console","log","winner","status","moves","map","step","move","desc","slice","calcWinnerResult","jumpTo","reverse","alert","moveLocation","floor","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4c9d9a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\n/**\r\n * Square component\r\n * @param {string} className init className of component\r\n * @param {callback} onClick\r\n * @param {string} value\r\n * @return {JSX.Element} \r\n */\r\nconst Square = ({className, onClick, value}) => (\r\n    <button className={className + \" square\"} onClick={onClick}>\r\n        {value}\r\n    </button>\r\n)\r\n\r\nexport default Square","import React from 'react'\r\nimport Square from '../Square'\r\n\r\n/**\r\n * \r\n * @param {number} size\r\n * @param {list} squares\r\n * @param {callback} onClick\r\n * @param {list} highlightItems\r\n * @returns {JSX.Element}\r\n */\r\nconst Board = ({size, squares, onClick, highlightItems}) => {\r\n    const renderSquare = (i, isHighlight) => {\r\n        return (\r\n        <Square\r\n            className={isHighlight ? \"highlight\" : \"\"}\r\n            value={squares[i]}\r\n            onClick={() => onClick(i)}\r\n        />\r\n        )\r\n    }\r\n    \r\n\r\n    let boardItems = []\r\n    \r\n    let renderRow = rowI => {\r\n        let rowItems = []\r\n        for (let colI = 0; colI < size; ++colI) {\r\n        let index = rowI * size + colI\r\n        let isHighlight = highlightItems ? highlightItems.includes(index) : false\r\n        rowItems.push(renderSquare(index, isHighlight))\r\n        }\r\n        return (<div className=\"board-row\">{rowItems}</div>)\r\n    }\r\n    \r\n    for(let i = 0; i < size; ++i)\r\n        boardItems.push(renderRow(i))\r\n    \r\n    return (\r\n        <div className=\"center\">\r\n        {/* <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n        </div> */}\r\n        {boardItems}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board","import React, { useState } from 'react';\r\nimport Board from '../Board';\r\nconst BOARD_SIZE = 5\r\n\r\nconst Game = () => {\r\n    const [history, setHistory] = useState([\r\n        {\r\n            squares: Array(Math.pow(BOARD_SIZE, 2) + 1).fill(null),\r\n            location: null\r\n        }\r\n    ])\r\n    const [stepNumber, setStepNumber] = useState(0)\r\n    const [xIsNext, setXIsNext] = useState(true)\r\n    const [reverseMoveList, setReverseMoveList] = useState(false)\r\n    const [highlightItems, setHighlightItems] = useState([])\r\n\r\n    const calculateWinner = (squares, location, stepNumber) => {\r\n        if (!location) return undefined\r\n        \r\n        if (stepNumber === Math.pow(BOARD_SIZE, 2)) {\r\n            return {value: 'draw', winCase: null}\r\n        }\r\n        \r\n        let currentSquare = squares[location.row * BOARD_SIZE + location.col]\r\n        \r\n        let copy = [...squares]\r\n        let board = []\r\n        while(copy.length) board.push(copy.splice(0, BOARD_SIZE))\r\n        \r\n        let rowSquares = []\r\n        let colSquares = []\r\n        let diagSquares = []\r\n        let antiSquares = []\r\n        \r\n        let locationToIndex = (row, col) => row * BOARD_SIZE + col\r\n        for(let i = 0; i < BOARD_SIZE; ++i) {\r\n            if (board[location.row][i] === currentSquare) rowSquares.push(locationToIndex(location.row, i))\r\n            if (board[i][location.col] === currentSquare) colSquares.push(locationToIndex(i, location.col))\r\n            if (board[i][i] === currentSquare) diagSquares.push(locationToIndex(i, i))\r\n            if (board[BOARD_SIZE - i - 1][i] === currentSquare) antiSquares.push(locationToIndex(BOARD_SIZE - i - 1, i))\r\n        }\r\n        \r\n        let winSquare = null\r\n        let winSquares = null\r\n        \r\n        if (rowSquares.length === BOARD_SIZE) {\r\n            winSquare = currentSquare\r\n            winSquares = rowSquares\r\n        }\r\n        else if (colSquares.length === BOARD_SIZE) {\r\n            winSquare = currentSquare\r\n            winSquares = colSquares\r\n        }\r\n        else if (diagSquares.length === BOARD_SIZE) {\r\n            winSquare = currentSquare\r\n            winSquares = diagSquares\r\n        }\r\n        else if (antiSquares.length === BOARD_SIZE) {\r\n            winSquare = currentSquare\r\n            winSquares = antiSquares\r\n        }\r\n        if (winSquare) return {value: winSquare, winSquares: winSquares}\r\n    }\r\n\r\n    const handleClick = i => {\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        let calcWinnerResult = calculateWinner(squares, current.location, stepNumber)\r\n\r\n        // console.log(Math.floor(i / BOARD_SIZE), i % BOARD_SIZE)\r\n        let moveLocation = {\r\n            row: Math.floor(i / BOARD_SIZE),\r\n            col: i % BOARD_SIZE,\r\n            index: i\r\n        }\r\n\r\n        if (squares[i] || calcWinnerResult) {\r\n        return\r\n        }\r\n\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n\r\n        calcWinnerResult = calculateWinner(squares, moveLocation, stepNumber + 1)\r\n\r\n        setHistory(newHistory.concat([\r\n            {\r\n            squares: squares,\r\n            location: moveLocation\r\n            }\r\n        ]))\r\n        setStepNumber(newHistory.length)\r\n        setXIsNext(!xIsNext)\r\n        setHighlightItems(calcWinnerResult ? calcWinnerResult.winSquares : [])\r\n    }\r\n\r\n    const jumpTo = step => {\r\n        const newHistory = history.slice(0, step + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        let calcWinnerResult = calculateWinner(squares, current.location, step)\r\n        \r\n        setStepNumber(step)\r\n        setXIsNext((step % 2) === 0)\r\n        setHighlightItems(calcWinnerResult ? calcWinnerResult.winSquares : [])\r\n \r\n    }\r\n\r\n    const newHistory = history;\r\n    const current = newHistory[stepNumber];\r\n    console.log(newHistory, stepNumber)\r\n    console.log(current)\r\n    let winner = calculateWinner(current.squares, current.location, stepNumber);\r\n    winner = winner ? winner.value : winner\r\n    const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n        `Go to move #${move} at (${step.location.col}, ${step.location.row})`:\r\n        'Go to game start';\r\n        let className = move == stepNumber ? 'selected-item' : ''\r\n        return (\r\n        <li className={className} key={move}>\r\n            <button className={className} onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n        );\r\n    });\r\n    if (reverseMoveList) moves.reverse()\r\n    let status;\r\n\r\n    if (winner && winner !== 'draw') {\r\n        status = \"Winner: \" + winner;\r\n    }\r\n    else if (winner === 'draw') {\r\n        status = 'Match End: Draw'\r\n        alert(status)\r\n    }\r\n    else {\r\n        status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n        <div className=\"game-board\">\r\n            <Board\r\n            highlightItems = {highlightItems}\r\n            squares={current.squares}\r\n            onClick={i => handleClick(i)}\r\n            size={BOARD_SIZE}\r\n            />\r\n        </div>\r\n        <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <br/>\r\n            <div>\r\n            <ol>{moves}</ol>\r\n            <button onClick={()=>{setReverseMoveList(!reverseMoveList)}}>Reverse List Order</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Game from './components/Game'\n\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}